{
	debug
	auto_https off
	log {
		level DEBUG
		output stdout
		format console
	}
}

{$GATEWAY_DOMAIN} {
	log default {
		level DEBUG
		hostnames {args[0]}
		output stdout
		format json
	}

	# handle forward_auth, make jwt middleware (user service) receive GET instead of OPTIONS method
	@preflight method OPTIONS
	handle @preflight {
		header Access-Control-Allow-Origin {$ALLOW_ORIGIN_DOMAIN}{$ALLOW_ORIGIN_DOMAIN_PORT}
		header Access-Control-Allow-Methods "GET,POST,OPTIONS,PATCH"
		header Access-Control-Allow-Headers "Authorization,Content-Type"
		# header Access-Control-Allow-Credentials true # if cookies need
		respond 204
	}

	# Public routes (no authentication)
	handle /user/login {
		reverse_proxy {$USER_REVERSE_PROXY_ENDPOINT}:{$USER_REVERSE_PROXY_PORT} {
			# CORS can be handler in proxy and in user-service cors handler, just pick only one solution
			# ensure CORS headers from upstream get passed back to client
			# see https://caddyserver.com/docs/caddyfile/directives/reverse_proxy#headers
			# header_down Access-Control-Allow-Origin *
			# header_down Access-Control-Allow-Headers *
			# header_down Access-Control-Allow-Methods *
		}
	}

	# Development url : http://127.0.0.1:5050/pgadmin/browser/ or http://localhost/pgadmin/browser
	handle /pgadmin/* {
		reverse_proxy pgadmin:80 {
			# see more info about X-script: https://www.pgadmin.org/docs/pgadmin4/8.14/container_deployment.html
			header_up X-Script-Name /pgadmin
		}
	}

	# http://localhost/nats-monitor/
	# Becareful in production
	handle_path /nats-monitor/* {
		reverse_proxy {$NAT_MONITOR_REVERSE_PROXY_ENDPOINT}:{$NAT_MONITOR_REVERSE_PROXY_PORT}
	}

	# MinIO Web UI: http://localhost/minio-sp/
	handle_path /minio-sp/* {
		reverse_proxy {$MINIO_SHOP_PRODUCT_REVERSE_PROXY_ENDPOINT}:{$MINIO_SHOP_PRODUCT_WEB_UI_PORT}
	}

	# MinIO API 
	handle_path /minio-sp-api/* {
		reverse_proxy {$MINIO_SHOP_PRODUCT_REVERSE_PROXY_ENDPOINT}:{$MINIO_SHOP_PRODUCT_API_PORT}
	}

	# Protected routes
	handle {
		forward_auth {$USER_REVERSE_PROXY_ENDPOINT}:{$USER_REVERSE_PROXY_PORT} {
			uri /user/auth
			copy_headers Authorization X-User-Name X-User-Email X-User-Id X-User-Role
		}

		handle_path /cart/* {
			reverse_proxy {$CART_REVERSE_PROXY_ENDPOINT}:{$CART_REVERSE_PROXY_PORT} {
				# header_up -Authorization # if don't need token
			}
		}

		handle_path /shop-product/* {
			reverse_proxy {$SHOP_PRODUCT_REVERSE_PROXY_ENDPOINT}:{$SHOP_PRODUCT_REVERSE_PROXY_PORT} {
				# header_up Authorization
			}
		}

		handle_path /user/* {
			rewrite * /user{uri}
			reverse_proxy {$USER_REVERSE_PROXY_ENDPOINT}:{$USER_REVERSE_PROXY_PORT}
		}

		handle_path /payment/* {
			reverse_proxy {$PAYMENT_REVERSE_PROXY_ENDPOINT}:{$PAYMENT_REVERSE_PROXY_PORT}
		}

		# Catch all unmatched routes
		handle {
			respond "Gateway - Endpoint Not Found" 404
		}
	}
}
